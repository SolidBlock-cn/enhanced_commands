{
  "enhancedCommands.argument.block.feature_required": "The block id %s (%s) exists, but it cannot be used because required feature flags are not enabled (usually experimental features)",
  "enhancedCommands.argument.block.ignore_feature_flag": "Ignore required feature flag",
  "enhancedCommands.argument.block_function.cannotParse": "Cannot parse block function",
  "enhancedCommands.argument.block_function.conditional": "Use the function when block predicate passes",
  "enhancedCommands.argument.block_function.dry": "Remove fluids from a block",
  "enhancedCommands.argument.block_function.filter": "Apply a block function when the predicate passes",
  "enhancedCommands.argument.block_function.id_contain": "Random block of which id matches the pattern",
  "enhancedCommands.argument.block_function.id_replace": "Replace the block id, ignores when replaced id does not exist",
  "enhancedCommands.argument.block_function.mirror": "Mirror the block",
  "enhancedCommands.argument.block_function.originalValue": "Using original value",
  "enhancedCommands.argument.block_function.overlay": "Overlay multiple block functions",
  "enhancedCommands.argument.block_function.overlay.symbol_tooltip": "Overlay another",
  "enhancedCommands.argument.block_function.pick": "Pick one block function randomly",
  "enhancedCommands.argument.block_function.pick.symbol_tooltip": "Add alternative",
  "enhancedCommands.argument.block_function.pick.zero_sum": "The sum of weight values cannot be zero",
  "enhancedCommands.argument.block_function.property.all_original": "All original properties",
  "enhancedCommands.argument.block_function.property.all_random": "All random properties",
  "enhancedCommands.argument.block_function.property.duplicate_general": "Duplicate general property function ('*' or '~' without property name)",
  "enhancedCommands.argument.block_function.property.exhausted_general_properties": "All possible properties are defined and no general property is needed",
  "enhancedCommands.argument.block_function.random": "Random block with random states",
  "enhancedCommands.argument.block_function.randomValue": "Random value",
  "enhancedCommands.argument.block_function.rotate": "Rotate the block",
  "enhancedCommands.argument.block_function.stone_cut": "Result of stonecutting of block",
  "enhancedCommands.argument.block_function.use_original": "Use the original block",
  "enhancedCommands.argument.block_predicate.above_block": "Above a block that matches a predicate",
  "enhancedCommands.argument.block_predicate.anyValue": "Matches any value, as long as the property exists",
  "enhancedCommands.argument.block_predicate.beneath_block": "Beneath a block that matches a predicate",
  "enhancedCommands.argument.block_predicate.bi_predicate_diff": "Takes two conditions, passes only one pass and another fail",
  "enhancedCommands.argument.block_predicate.bi_predicate_diff_fail": "As in the two tests, one passed and another failed, the test failed:",
  "enhancedCommands.argument.block_predicate.bi_predicate_diff_pass": "As in the two tests, one passed and another failed, the test passed:",
  "enhancedCommands.argument.block_predicate.bi_predicate_same": "Takes two conditions, passes only both pass or both fail",
  "enhancedCommands.argument.block_predicate.bi_predicate_same_fail": "As both of the tests passed or failed, the test failed:",
  "enhancedCommands.argument.block_predicate.bi_predicate_same_pass": "As both of the tests passed of failed, the test passed:",
  "enhancedCommands.argument.block_predicate.cannotParse": "Cannot parse block predicate",
  "enhancedCommands.argument.block_predicate.comparator_expected": "Comparator expected",
  "enhancedCommands.argument.block_predicate.constant": "Match any",
  "enhancedCommands.argument.block_predicate.constant.pass": "The block passes because the predicate matches any",
  "enhancedCommands.argument.block_predicate.end_of_properties": "End of properties",
  "enhancedCommands.argument.block_predicate.expected_property_does_not_exist": "The block at %s does not have property %s, but the expected result is %s",
  "enhancedCommands.argument.block_predicate.expose": "Test whether a block is exposed",
  "enhancedCommands.argument.block_predicate.expose.fail": "The block fails the exposure type test because:",
  "enhancedCommands.argument.block_predicate.expose.pass": "The block passes the exposure type test because:",
  "enhancedCommands.argument.block_predicate.expose.side.fail": "The block fails the exposure type test on the %s side",
  "enhancedCommands.argument.block_predicate.expose.side.pass": "The block passes the exposure type test on the %s side",
  "enhancedCommands.argument.block_predicate.fail": "The block at %s fails the test",
  "enhancedCommands.argument.block_predicate.id_contain": "Tests whether the regex matches the block id",
  "enhancedCommands.argument.block_predicate.id_contain.fail": "The regex (%s) cannot match the id of the block (%s)",
  "enhancedCommands.argument.block_predicate.id_contain.pass": "The regex (%s) can match the id of the block (%s)",
  "enhancedCommands.argument.block_predicate.in_the_tag": "The block at %s is %s, which is in the tag %s",
  "enhancedCommands.argument.block_predicate.intersect": "Intersect multiple conditions, passes only if all pass",
  "enhancedCommands.argument.block_predicate.intersect.fail": "As some of the following failed (%s/%s), the test failed:",
  "enhancedCommands.argument.block_predicate.intersect.pass": "As all of the following passed (%s/%s), the test passes:",
  "enhancedCommands.argument.block_predicate.intersect.symbol_tooltip": "Intersect another",
  "enhancedCommands.argument.block_predicate.negation": "Negation",
  "enhancedCommands.argument.block_predicate.negation.fail": "The test failed because the following test passed:",
  "enhancedCommands.argument.block_predicate.negation.pass": "The test passed because the following test failed:",
  "enhancedCommands.argument.block_predicate.next_property": "Next property",
  "enhancedCommands.argument.block_predicate.no_property_this_name": "The block %s has no property named %s",
  "enhancedCommands.argument.block_predicate.no_property_this_name_empty": "The block %s has no property with empty name",
  "enhancedCommands.argument.block_predicate.noneValue": "Don't match values, which means the property should not exist",
  "enhancedCommands.argument.block_predicate.not_in_the_tag": "The block at %s is %s, which is not in the tag %s",
  "enhancedCommands.argument.block_predicate.not_the_block": "The block at %s is %s, but the expected value is %s",
  "enhancedCommands.argument.block_predicate.pass": "The block at %s passes the test",
  "enhancedCommands.argument.block_predicate.probability": "Only passes under a probability",
  "enhancedCommands.argument.block_predicate.probability.fail": "Probability test failed: random value %s exceeds expected %s",
  "enhancedCommands.argument.block_predicate.probability.pass": "Probability test passes: random value %s is lower than %s",
  "enhancedCommands.argument.block_predicate.property_name_fail_does_not_exist": "The block %s does not have the property named %s",
  "enhancedCommands.argument.block_predicate.property_name_fail_exists": "The block %s has the property named %s",
  "enhancedCommands.argument.block_predicate.property_name_pass_does_not_exist": "The block %s does not have the property named %s",
  "enhancedCommands.argument.block_predicate.property_name_pass_exists": "The block %s has the property named %s",
  "enhancedCommands.argument.block_predicate.property_not_this_value": "The block at %s has the property %s, but the expected value is %s",
  "enhancedCommands.argument.block_predicate.property_test_pass": "Property test %s passed",
  "enhancedCommands.argument.block_predicate.property_value_not_parsed": "The property %s cannot parse the value %s",
  "enhancedCommands.argument.block_predicate.property_value_not_parsed_empty": "The property %s cannot parse the empty value",
  "enhancedCommands.argument.block_predicate.region": "Blocks in the region",
  "enhancedCommands.argument.block_predicate.region.fail": "The block at %s is not in the region %s",
  "enhancedCommands.argument.block_predicate.region.pass": "The block at %s is in the region",
  "enhancedCommands.argument.block_predicate.rel": "Test a block at a relative position",
  "enhancedCommands.argument.block_predicate.rel.fail": "The block of relative position %s fails the test, because:",
  "enhancedCommands.argument.block_predicate.rel.pass": "The block of relative position %s passes the test, because:",
  "enhancedCommands.argument.block_predicate.start_of_properties": "Start of properties",
  "enhancedCommands.argument.block_predicate.test_relative_above_fail": "The block at %s blocks above %s fails the test, because:",
  "enhancedCommands.argument.block_predicate.test_relative_above_pass": "The block at %s blocks above %s passes the test, because:",
  "enhancedCommands.argument.block_predicate.test_relative_below_fail": "The block at %s blocks below %s fails the test, because:",
  "enhancedCommands.argument.block_predicate.test_relative_below_pass": "The block at %s blocks below %s passes the test, because:",
  "enhancedCommands.argument.block_predicate.union": "Union multiple conditions, passes if at least one passes",
  "enhancedCommands.argument.block_predicate.union.fail": "As none of the following passed (%s/%s), the test failed:",
  "enhancedCommands.argument.block_predicate.union.pass": "As at least one of the following passed (%s/%s), the test passes:",
  "enhancedCommands.argument.block_predicate.union.symbol_tooltip": "Union another",
  "enhancedCommands.argument.block_predicate.unknown_comparator": "Unknown comparator: %s",
  "enhancedCommands.argument.curve.circle": "Circle",
  "enhancedCommands.argument.curve.straight": "Straight",
  "enhancedCommands.argument.keyword_args.duplicate_argument_name": "Duplicate argument name: %s",
  "enhancedCommands.argument.keyword_args.unknown_argument_name": "Unknown argument name: %s",
  "enhancedCommands.argument.nbt_function.duplicate_eclipse": "Duplicate eclipse",
  "enhancedCommands.argument.nbt_function.duplicate_semicolon": "Duplicate semicolon",
  "enhancedCommands.argument.nbt_function.eclipse": "Eclipse, indicating prepending or appending",
  "enhancedCommands.argument.nbt_function.equal": "Set a value or set a number while keeping type",
  "enhancedCommands.argument.nbt_function.merge": "Set a value or merge a compound",
  "enhancedCommands.argument.nbt_function.remove_key": "Remove a key from the compound",
  "enhancedCommands.argument.nbt_function.semicolon": "Separating value specifications and value insertions",
  "enhancedCommands.argument.nbt_function.sign_expected": "Sign (':' or '=') expected",
  "enhancedCommands.argument.nbt_function.sign_unexpected_when_removing_key": "Signs and values are unexpected when removing a key",
  "enhancedCommands.argument.nbt_function.unexpected_semicolon_after_eclipse": "Unexpected semicolon after eclipse",
  "enhancedCommands.argument.nbt_predicate.duplicate_key": "Duplicate key: %s",
  "enhancedCommands.argument.nbt_predicate.must_be_number_or_string": "The value after the comparator must be a number or string, instead of %s",
  "enhancedCommands.argument.nbt_predicate.sign_expected": "Sign (':' or '=') expected",
  "enhancedCommands.argument.nbt_predicate.tooltip.any_key": "Any key",
  "enhancedCommands.argument.nbt_predicate.tooltip.any_value": "Any value",
  "enhancedCommands.argument.nbt_predicate.tooltip.end_of_compound": "End of the NBT compound",
  "enhancedCommands.argument.nbt_predicate.tooltip.end_of_list": "End of the NBT list",
  "enhancedCommands.argument.nbt_predicate.tooltip.equal": "Equals to a value, or numerically equals to a number",
  "enhancedCommands.argument.nbt_predicate.tooltip.match": "Matches a value",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_equal": "Not equal to value or numerically equal",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_match": "Not matching a value",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_regex": "Not matching a regex pattern",
  "enhancedCommands.argument.nbt_predicate.tooltip.regex": "Matches a regex pattern",
  "enhancedCommands.argument.nbt_predicate.tooltip.separate": "Separator between elements",
  "enhancedCommands.argument.nbt_predicate.tooltip.start_of_compound": "Start of an NBT compound",
  "enhancedCommands.argument.nbt_predicate.tooltip.start_of_list": "Start of an NBT list",
  "enhancedCommands.argument.pos.crosshair_double": "The precise position of the crosshair target",
  "enhancedCommands.argument.pos.crosshair_double.remaining": "Remaining coordinates of precise crosshair target position",
  "enhancedCommands.argument.pos.crosshair_int": "The block position of the crosshair target",
  "enhancedCommands.argument.pos.crosshair_int.remaining": "Remaining coordinates of crosshair target block position",
  "enhancedCommands.argument.pos.here_double": "Current precise position",
  "enhancedCommands.argument.pos.here_int": "Current block position",
  "enhancedCommands.argument.pos.local_coordinate": "Local coordinates",
  "enhancedCommands.argument.pos.local_coordinate.remaining": "Remaining local coordinates",
  "enhancedCommands.argument.pos.local_coordinates_not_allowed": "Local coordinates are not allowed here",
  "enhancedCommands.argument.pos.out_of_bounds": "The position %s is out of bounds",
  "enhancedCommands.argument.pos.out_of_build_limit": "The position %s is out of build limit",
  "enhancedCommands.argument.pos.out_of_height_limit": "The position %s is ouf of height limit (%s ≤ Y < %s)",
  "enhancedCommands.argument.pos.out_of_horizontal_bounds": "The position %s is out of horizontal bounds (%s ≤ X,Y < %s)",
  "enhancedCommands.argument.pos.relative_coordinate": "Relative coordinates",
  "enhancedCommands.argument.pos.relative_coordinate.remaining": "Remaining relative coordinates",
  "enhancedCommands.argument.pos.unloaded": "The position %s is in an unloaded chunk",
  "enhancedCommands.argument.regex.invalid": "Invalid regex: %s",
  "enhancedCommands.argument.region.active_region": "Current active region",
  "enhancedCommands.argument.region.cuboid": "Cuboid",
  "enhancedCommands.argument.region.cuboid_outline": "Cuboid outline",
  "enhancedCommands.argument.region.cuboid_outline.non_positive_thickness": "The thickness of the must be a positive integer, but got %s",
  "enhancedCommands.argument.region.cuboid_outline.too_thick": "The region is too thick: expected no larger than %s, but got %s",
  "enhancedCommands.argument.region.cuboid_wall": "Cuboid wall",
  "enhancedCommands.argument.region.cylinder": "Cylinder",
  "enhancedCommands.argument.region.exception.cylinder_must_expand_vertically": "The cylinder region can be expanded or contracted vertically only, instead of horizontally",
  "enhancedCommands.argument.region.exception.expand_must_int": "The expansion or contraction amount for this region must be integer, but got %s",
  "enhancedCommands.argument.region.exception.mirror_pivot_must_center": "The pivot position to mirror this region must be the center of a block pos, but got %s",
  "enhancedCommands.argument.region.exception.move_must_int": "The move amount for this region must be integer, but got %s",
  "enhancedCommands.argument.region.exception.move_must_int_vector": "The vector to move this region must be integer vector, but got %s",
  "enhancedCommands.argument.region.exception.rotation_pivot_must_center": "The pivot position to rotate this region must be the center of a block pos, but got %s",
  "enhancedCommands.argument.region.hollow_cylinder": "Hollow cylinder",
  "enhancedCommands.argument.region.intersect": "Intersect of multiple regions",
  "enhancedCommands.argument.region.no_active_region": "Player %s has no active region and cannot complete the operation",
  "enhancedCommands.argument.region.outline": "Outline of a region",
  "enhancedCommands.argument.region.outwards": "Iterate from a position outwards",
  "enhancedCommands.argument.region.single": "Single position",
  "enhancedCommands.argument.region.sphere": "Sphere",
  "enhancedCommands.argument.region.union": "Union multiple regions",
  "enhancedCommands.argument.region_builder.cuboid.set_first": "The first point has been set to %s",
  "enhancedCommands.argument.region_builder.cuboid.set_second": "The second point has been set to %s",
  "enhancedCommands.argument.region_builder.cuboid.statistics": "The size of the cuboid %s, including %s $plural(blocks, block)",
  "enhancedCommands.argument.region_builder.extension.include": "The region is extended so as to include %s",
  "enhancedCommands.argument.region_builder.extension.not_infected": "The region is not extended because %s is already within the region",
  "enhancedCommands.argument.region_builder.not_completed": "The region build is not completed",
  "enhancedCommands.argument.region_builder.sphere.set_center": "The center of the sphere is set to %s",
  "enhancedCommands.argument.region_builder.sphere.set_radius": "The radius of sphere is adjusted so as to fit %s",
  "enhancedCommands.argument.region_builder.sphere.statistics": "The radius radius of the sphere is %s",
  "enhancedCommands.argument.region_builder.wand": "Wand",
  "enhancedCommands.argument.unknown_value": "Unknown value: %s",
  "enhancedCommands.argument.unloaded_pos_behavior.break": "Break the operation when finding positions unloaded",
  "enhancedCommands.argument.unloaded_pos_behavior.force": "Force to load the unloaded position",
  "enhancedCommands.argument.unloaded_pos_behavior.reject": "Reject whole operation when positions are unloaded",
  "enhancedCommands.argument.unloaded_pos_behavior.skip": "Skip parts in positions unloaded",
  "enhancedCommands.axis.front_back": "axis of front and back directions",
  "enhancedCommands.axis.front_back_horizontal": "axis of horizontal front and back directions",
  "enhancedCommands.axis.left_right": "axis of left and right directions",
  "enhancedCommands.axis.random": "random axis",
  "enhancedCommands.axis.random_horizontal": "random horizontal axis",
  "enhancedCommands.axis.x": "X",
  "enhancedCommands.axis.y": "Y",
  "enhancedCommands.axis.z": "Z",
  "enhancedCommands.blockPos": "(%s %s %s)",
  "enhancedCommands.commands.activeregion.expand.all_directions.multiple": "Expanded the active region of %1$s $plural(players, player) by %2$s $plural(blocks, block) in all directions",
  "enhancedCommands.commands.activeregion.expand.all_directions.single": "Expanded the active region of player %1$s by %2$s $plural(blocks, block) in all directions; the expanded region is %3$s",
  "enhancedCommands.commands.activeregion.expand.axis.multiple": "Expanded the active region of %1$s $plural(players, player) by %2$s $plural(blocks, block) on the %3$s axis",
  "enhancedCommands.commands.activeregion.expand.axis.single": "Expanded the active region of player %1$s by %2$s $plural(blocks, block) on the %3$s axis; the expanded region is %4$s",
  "enhancedCommands.commands.activeregion.expand.direction.multiple": "Expanded the active region of %1$s $plural(players, player) by %2$s $plural(blocks, block) %3$s",
  "enhancedCommands.commands.activeregion.expand.direction.single": "Expanded the active region of player %1$s by %2$s $plural(blocks, block) %3$s; the expanded region is %4$s",
  "enhancedCommands.commands.activeregion.expand.direction_type.multiple": "Expanded the active region of %1$s $plural(players, player) by %2$s $plural(blocks, block) %3$s",
  "enhancedCommands.commands.activeregion.expand.direction_type.single": "Expanded the active region of player %1$s by %2$s $plural(blocks, block) %3$s; the expanded region is %4$s",
  "enhancedCommands.commands.activeregion.get": "The active region of player %s is %s",
  "enhancedCommands.commands.activeregion.get_none": "The player %s has no active region",
  "enhancedCommands.commands.activeregion.mirror.multiple": "Mirrored active region of %s $plural(players, player)",
  "enhancedCommands.commands.activeregion.mirror.single": "Mirrored active region of player %s to %s",
  "enhancedCommands.commands.activeregion.move.multiple": "Moved active region of %s $plural(players, player)",
  "enhancedCommands.commands.activeregion.move.single": "Moved active region of player %s to %s",
  "enhancedCommands.commands.activeregion.remove.multiple": "Successfully removed active region for %s players",
  "enhancedCommands.commands.activeregion.remove.single": "Successfully removed active region for player %s",
  "enhancedCommands.commands.activeregion.rotate.multiple": "Rotated active region of %s $plural(players, player)",
  "enhancedCommands.commands.activeregion.rotate.single": "Rotated active region of player %s to %s",
  "enhancedCommands.commands.activeregion.set.multiple": "Successfully set active region for %s players",
  "enhancedCommands.commands.activeregion.set.single": "Successfully set active region for player %s",
  "enhancedCommands.commands.activeregion.unsupported": "The operation for the active region is not supported",
  "enhancedCommands.commands.activeregion.unsupported_with_region": "The operation for the active region is not supported because: %s",
  "enhancedCommands.commands.draw.task_name": "Make curve blocks (curve %s)",
  "enhancedCommands.commands.fill.broken": "The block operation is broken because it met unloaded positions",
  "enhancedCommands.commands.fill.complete": "The block operation in the region is completed, affecting %s $plural(blocks, block)",
  "enhancedCommands.commands.fill.complete_broken": "The block operation in the region is partially completed but stopped due to unloaded positions, affecting %s $plural(blocks, block)",
  "enhancedCommands.commands.fill.complete_skipped": "The block operation in the region is partially completed with skipping some unloaded positions, affecting %s $plural(blocks, block)",
  "enhancedCommands.commands.fill.large_region": "Starting to set massive blocks in a large region (about %s blocks). It will be completed for a while.",
  "enhancedCommands.commands.fill.region_too_large": "The command cannot be executed because the region is too large (about %s blocks in the region, but the limit is %s). If you are sure to perform that, please add parameter \"bypass_limit=true\".",
  "enhancedCommands.commands.fill.rejected": "Cannot run the operation because some positions of the region may be in unloaded chunks; add parameter %s to force load unloaded positions",
  "enhancedCommands.commands.fill.skipped": "The block operation has skipped some part because it met unloaded positions",
  "enhancedCommands.commands.fill.task_name": "Fill blocks (region %s)",
  "enhancedCommands.commands.mirror.complete": "Mirror completed, affecting %s $plural(blocks, block)",
  "enhancedCommands.commands.mirror.task": "Mirror block (region %s)",
  "enhancedCommands.commands.move.complete.direction": "Moved the region %1$s $plural(blocks, block) %2$s, affecting %3$s $plural(blocks, block)",
  "enhancedCommands.commands.move.complete.vector": "Moved the region %1$s, affecting %3$s $plural(blocks, block)",
  "enhancedCommands.commands.move.task.direction": "Move blocks (region %1$s) by %2$s %3$s",
  "enhancedCommands.commands.move.task.vector": "Move blocks (region %1$s) according to vector %2$s",
  "enhancedCommands.commands.rand.boolean.0": "You're lucky because you picked %s",
  "enhancedCommands.commands.rand.boolean.1": "Surprisingly, this time the boolean value is %s",
  "enhancedCommands.commands.rand.boolean.2": "It's hard to choose between true and false, but you met %s",
  "enhancedCommands.commands.rand.boolean.3": "Boolean is easy to learn but hard to choose - until you chose %s",
  "enhancedCommands.commands.rand.boolean.4": "This time it is %s - is it within your expectation?",
  "enhancedCommands.commands.rand.boolean.5": "Look! The value is %s. What does it stand for?",
  "enhancedCommands.commands.rand.boolean.6": "True and false, that's not the question, because you chose %s",
  "enhancedCommands.commands.rand.boolean.7": "It's not a surprise to pick %s, because each boolean has an equal opportunity to be selected",
  "enhancedCommands.commands.rand.boolean.8": "I think this time, %s is the most suitable",
  "enhancedCommands.commands.rand.boolean.9": "I asked the two boolean values, and %s responded the most quickly",
  "enhancedCommands.commands.rand.boolean_with_probability.0": "When the probability is %s, you met with a %s",
  "enhancedCommands.commands.rand.boolean_with_probability.1": "The probability to pick true is %s, while you luckily picked %s",
  "enhancedCommands.commands.rand.boolean_with_probability.2": "You luckily picked %2$s, while the probability to pick true is %s",
  "enhancedCommands.commands.rand.boolean_with_probability.3": "Boolean is hard to choose because you have %s chance to pick true, but you picked %s",
  "enhancedCommands.commands.rand.boolean_with_probability.4": "This time it is %2$s, while the probability to pick true is %1$s - is it within your expectation?",
  "enhancedCommands.commands.rand.boolean_with_probability.5": "Look! The value is %2$s while you have %1$s chance to pick true. What does it stand for?",
  "enhancedCommands.commands.rand.boolean_with_probability.6": "Do you think it is hard to choose %2$s, while the chance to pick true is %1$s?",
  "enhancedCommands.commands.rand.boolean_with_probability.7": "The true value has chance of %s to be selected, and you picked %s. Is is a surprise?",
  "enhancedCommands.commands.rand.boolean_with_probability.8": "I think this time, %2$s is the most suitable, even if you have %1$s chance to pick true",
  "enhancedCommands.commands.rand.boolean_with_probability.9": "Surprisingly, even if the chance to pick true is %s, %s stands out",
  "enhancedCommands.commands.rand.min_max_wrong": "The min value (%s) should not be larger than the max value (%s)",
  "enhancedCommands.commands.rand.number.0": "This time, the random value between %s and %s is %s",
  "enhancedCommands.commands.rand.number.1": "Each number between %s and %s has an equal chance, but you selected %s",
  "enhancedCommands.commands.rand.number.2": "When picking number between %s and %s, the number %s is luckily enough to be picked",
  "enhancedCommands.commands.rand.number.3": "The result is simple: you got %3$s, while the range is from %1$s to %2$s",
  "enhancedCommands.commands.rand.number.4": "I asked all numbers between %s and %s, and think %s is the most suitable for you",
  "enhancedCommands.commands.rand.number.5": "In all numbers between %s and %s, one number wants the opportunity, saying its name is %s",
  "enhancedCommands.commands.rand.number.6": "The number %3$s whispers to you: I'm lucky to meet you, while other numbers between %1$s and %2$s are in silence",
  "enhancedCommands.commands.rand.number.7": "I examined all numbers between %s and %s, and %s won",
  "enhancedCommands.commands.rand.number.8": "I think this time, for numbers between %s and %s, %s is the most suitable",
  "enhancedCommands.commands.rand.number.9": "I'm surprised that %3$s is picked, instead of other values between %1$s and %2$s",
  "enhancedCommands.commands.regionbuilder.build_now": "Hold the item and attack blocks (%s) to set first point, and use on block (%s) to set second point",
  "enhancedCommands.commands.regionbuilder.changed": "The region builder type is set to %s",
  "enhancedCommands.commands.rotate.complete": "Rotation completed, affecting %s $plural(blocks, block)",
  "enhancedCommands.commands.rotate.task": "Rotate block (region %s)",
  "enhancedCommands.commands.tasks.buttons": "[%s]",
  "enhancedCommands.commands.tasks.buttons.suspended": "suspended",
  "enhancedCommands.commands.tasks.clear": "Removed %s $plural(tasks, task)",
  "enhancedCommands.commands.tasks.clear.none": "No tasks to be removed",
  "enhancedCommands.commands.tasks.continue": "continue",
  "enhancedCommands.commands.tasks.continue.not_suspended": "The task '%s' is not suspended yet",
  "enhancedCommands.commands.tasks.continue.success": "Successfully continued task '%s'",
  "enhancedCommands.commands.tasks.continue.tooltip": "Click here to continue the task",
  "enhancedCommands.commands.tasks.count": "There $plural(%1$s, are, is) %1$s $plural(%1$s, tasks, task) currently",
  "enhancedCommands.commands.tasks.count.none": "There are no tasks currently",
  "enhancedCommands.commands.tasks.exhaust": "exhaust",
  "enhancedCommands.commands.tasks.exhaust.start": "Started instantly completing task %s; it may cause the server lag to for a while",
  "enhancedCommands.commands.tasks.exhaust.success": "Completed task: %s",
  "enhancedCommands.commands.tasks.exhaust.tooltip": "Click here to force completing the task",
  "enhancedCommands.commands.tasks.list.limit_note": "Some tasks may not be displayed above, as it is limited to display %s tasks",
  "enhancedCommands.commands.tasks.list.none": "There are currently no tasks in the server",
  "enhancedCommands.commands.tasks.list.summary": "The are %s $plural(tasks, task) in the server:",
  "enhancedCommands.commands.tasks.not_exist": "The task with UUID %s does not exist",
  "enhancedCommands.commands.tasks.remove": "remove",
  "enhancedCommands.commands.tasks.remove.collected": "The task has already been collected as garbage by JVM",
  "enhancedCommands.commands.tasks.remove.success": "Removed task: %s",
  "enhancedCommands.commands.tasks.remove.tooltip": "Click here to remove the task",
  "enhancedCommands.commands.tasks.suspend": "suspend",
  "enhancedCommands.commands.tasks.suspend.already_suspended": "The task %s has already been in suspension",
  "enhancedCommands.commands.tasks.suspend.success": "Successfully suspended task: %s",
  "enhancedCommands.commands.tasks.suspend.tooltip": "Click here to suspend the task",
  "enhancedCommands.commands.testarg.nbt.nbt_to_string": "Result of NBT to string:\n%s",
  "enhancedCommands.commands.testarg.nbt.reparsed_function": "Reparsed NBT function:\n%s",
  "enhancedCommands.commands.testarg.nbt.reparsed_function_equal": "Result of reparsed function equals to the original NBT:\n%s",
  "enhancedCommands.commands.testarg.nbt.reparsed_predicate": "Reparsed NBT predicate:\n%s",
  "enhancedCommands.commands.testarg.nbt.reparsed_predicate_matches": "Reparsed predicate matches the original NBT:\n%s",
  "enhancedCommands.commands.testarg.pos.result": "The position argument is interpreted as follows:",
  "enhancedCommands.commands.testarg.region.verify.result": "For region %1$s, %2$s block(s) are iterated but do not match (marked as %3$s), and %4$s block(s) match but are not iterated (marked as %5%s).",
  "enhancedCommands.commands.testfor.block.info": "The block %s at %s is %s (%s)",
  "enhancedCommands.commands.testfor.block.info_with_properties": "The block %s at %s is %s (%s), with the following properties",
  "enhancedCommands.commands.testfor.block.not_loaded": "Cannot test block at %s because the chunk is no loaded",
  "enhancedCommands.commands.testfor.block.not_loaded_for_predicate": "Cannot test predicate for block at %s because the chunk is no loaded, you may add parameter force_load=true to force load and test the position",
  "enhancedCommands.commands.testfor.block_info.block_light": "The block %s at %s has the block light level %s",
  "enhancedCommands.commands.testfor.block_info.block_vision.false": "The block %s at %s does not block vision",
  "enhancedCommands.commands.testfor.block_info.block_vision.true": "The block %s at %s blocks vision",
  "enhancedCommands.commands.testfor.block_info.emits_redstone_power.false": "The block %s at %s does not emit redstone power",
  "enhancedCommands.commands.testfor.block_info.emits_redstone_power.true": "The block %s at %s emits redstone power",
  "enhancedCommands.commands.testfor.block_info.hardness": "The block %s at %s has the hardness %s",
  "enhancedCommands.commands.testfor.block_info.light": "The block %s at %s has the light level %s",
  "enhancedCommands.commands.testfor.block_info.luminance": "The block %s at %s has the luminance %s",
  "enhancedCommands.commands.testfor.block_info.model_offset.false": "The block %s at %s does not have a model offset",
  "enhancedCommands.commands.testfor.block_info.model_offset.true": "The block %s at %s has a following model offset: %s",
  "enhancedCommands.commands.testfor.block_info.opaque.false": "The block %s at %s is not opaque",
  "enhancedCommands.commands.testfor.block_info.opaque.true": "The block %s at %s is opaque",
  "enhancedCommands.commands.testfor.block_info.random_ticks.false": "The block %s at %s does not have random ticks",
  "enhancedCommands.commands.testfor.block_info.random_ticks.true": "The block %s at %s has random ticks",
  "enhancedCommands.commands.testfor.block_info.replaceable.false": "The block %s at %s is not replaceable when placing blocks",
  "enhancedCommands.commands.testfor.block_info.replaceable.true": "The block %s at %s is replaceable when placing blocks",
  "enhancedCommands.commands.testfor.block_info.sky_light": "The block %s at %s has the sky light level %s",
  "enhancedCommands.commands.testfor.block_info.strong_redstone_power": "The block %s at %s has the strong redstone power %s on the %s side",
  "enhancedCommands.commands.testfor.block_info.suffocate.false": "The block %s at %s does not suffocate",
  "enhancedCommands.commands.testfor.block_info.suffocate.true": "The block %s at %s suffocates",
  "enhancedCommands.commands.testfor.block_info.weak_redstone_power": "The block %s at %s has the weak redstone power %s on the %s side",
  "enhancedCommands.direction.all": "all directions",
  "enhancedCommands.direction.back": "the opposite of looking direction",
  "enhancedCommands.direction.back_horizontal": "the opposite of horizontal looking direction",
  "enhancedCommands.direction.down": "down",
  "enhancedCommands.direction.east": "east",
  "enhancedCommands.direction.front": "the looking direction",
  "enhancedCommands.direction.front_horizontal": "the horizontal looking direction",
  "enhancedCommands.direction.horizontal": "horizontal directions",
  "enhancedCommands.direction.left": "the left of looking direction",
  "enhancedCommands.direction.north": "north",
  "enhancedCommands.direction.random": "random direction",
  "enhancedCommands.direction.random_horizontal": "random vertical direction",
  "enhancedCommands.direction.random_vertical": "random horizontal direction",
  "enhancedCommands.direction.right": "the right of looking direction",
  "enhancedCommands.direction.south": "south",
  "enhancedCommands.direction.up": "up",
  "enhancedCommands.direction.vertical": "vertical directions",
  "enhancedCommands.direction.west": "west",
  "enhancedCommands.direction_type.horizontal": "horizontal",
  "enhancedCommands.direction_type.horizontal.adverb": "horizontally",
  "enhancedCommands.direction_type.vertical": "vertical",
  "enhancedCommands.direction_type.vertical.adverb": "vertically",
  "enhancedCommands.exposureType.air": "exposed to air",
  "enhancedCommands.exposureType.empty_collision": "exposed to a block without collision",
  "enhancedCommands.exposureType.empty_side_collision": "exposed to a block without collision at the side",
  "enhancedCommands.exposureType.incomplete_side_collision": "exposed to a block with incomplete (or empty) collision at the side",
  "enhancedCommands.outlineType.floor_and_ceil": "Block positions vertically next to least one (in 2) that is not in",
  "enhancedCommands.outlineType.outline": "Block positions next to at least one (in 6) that is not in",
  "enhancedCommands.outlineType.outline_connected": "Block positions near at least one (in 26) that is not in",
  "enhancedCommands.outlineType.wall": "Block positions horizontally next to at least one (in 4) that is not in",
  "enhancedCommands.outlineType.wall_connected": "Block positions horizontally near at least one (in 8) that is not in",
  "enhancedCommands.paramTooFew": "The number of parameters (%s) is lower than the limit (%s)",
  "enhancedCommands.paramTooMany": "The number of parameters (%s) exceeds the limit (%s)",
  "enhancedCommands.parsing.angle_accepted_values": "'deg', 'rad' or 'turn'",
  "enhancedCommands.parsing.angle_unit_expected": "Non-zero angles should have a unit (%2$s), but got '%1$s'",
  "enhancedCommands.parsing.angle_unit_unknown": "'%s' is not a valid angle unit (%s)",
  "enhancedCommands.parsing.duplicate_keyword": "Duplicate keyword '%s'",
  "enhancedCommands.parsing.expected.2": "Expected '%s' or '%s'",
  "enhancedCommands.parsing.expected.3": "Expected '%s', '%s' or '%s'",
  "enhancedCommands.parsing.expected.4": "Expected '%s', '%s', '%s' or '%s'",
  "enhancedCommands.parsing.unknown_keyword": "Unknown keyword '%s'",
  "enhancedCommands.position": "(%s, %s, %s)"
}