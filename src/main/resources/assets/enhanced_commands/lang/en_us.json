{
  "enhancedCommands.argument.blockPredicate.bi_predicate_diff": "Takes two conditions, passes only one pass and another fail",
  "enhancedCommands.argument.blockPredicate.bi_predicate_diff_fail": "As in the two tests, one passed and another failed, the test failed:",
  "enhancedCommands.argument.blockPredicate.bi_predicate_diff_pass": "As in the two tests, one passed and another failed, the test passed:",
  "enhancedCommands.argument.blockPredicate.bi_predicate_same": "Takes two conditions, passes only both pass or both fail",
  "enhancedCommands.argument.blockPredicate.bi_predicate_same_fail": "As both of the tests passed or failed, the test failed:",
  "enhancedCommands.argument.blockPredicate.bi_predicate_same_pass": "As both of the tests passed of failed, the test passed:",
  "enhancedCommands.argument.blockPredicate.constant.pass": "The block passes because the predicate matches any",
  "enhancedCommands.argument.blockPredicate.expected_property_does_not_exist": "The block at %s does not have property %s, but the expected result is %s",
  "enhancedCommands.argument.blockPredicate.expose": "Test whether a block is exposed",
  "enhancedCommands.argument.blockPredicate.expose.fail": "The block fails the exposure type test because:",
  "enhancedCommands.argument.blockPredicate.expose.pass": "The block passes the exposure type test because:",
  "enhancedCommands.argument.blockPredicate.expose.side.fail": "The block fails the exposure type test on the %s side",
  "enhancedCommands.argument.blockPredicate.expose.side.pass": "The block passes the exposure type test on the %s side",
  "enhancedCommands.argument.blockPredicate.fail": "The block at %s fails the test",
  "enhancedCommands.argument.blockPredicate.in_the_tag": "The block at %s is %s, which is in the tag %s",
  "enhancedCommands.argument.blockPredicate.intersect": "Intersect multiple conditions, passes only if all pass",
  "enhancedCommands.argument.blockPredicate.intersect.fail": "As some of the following failed (%s/%s), the test failed:",
  "enhancedCommands.argument.blockPredicate.intersect.pass": "As all of the following passed (%s/%s), the test passes:",
  "enhancedCommands.argument.blockPredicate.negation": "Negation",
  "enhancedCommands.argument.blockPredicate.negation.fail": "The test failed because the following test passed:",
  "enhancedCommands.argument.blockPredicate.negation.pass": "The test passed because the following test failed:",
  "enhancedCommands.argument.blockPredicate.no_property_this_name": "The block %s has no property named %s",
  "enhancedCommands.argument.blockPredicate.no_property_this_name_empty": "The block %s has no property with empty name",
  "enhancedCommands.argument.blockPredicate.not_in_the_tag": "The block at %s is %s, which is not in the tag %s",
  "enhancedCommands.argument.blockPredicate.not_the_block": "The block at %s is %s, but the expected value is %s",
  "enhancedCommands.argument.blockPredicate.pass": "The block at %s passes the test",
  "enhancedCommands.argument.blockPredicate.probability": "Only passes under a probability",
  "enhancedCommands.argument.blockPredicate.probability.fail": "Probability test failed: random value %s exceeds expected %s",
  "enhancedCommands.argument.blockPredicate.probability.pass": "Probability test passes: random value %s is lower than %s",
  "enhancedCommands.argument.blockPredicate.property_name_fail_does_not_exist": "The block %s does not have the property named %s",
  "enhancedCommands.argument.blockPredicate.property_name_fail_exists": "The block %s has the property named %s",
  "enhancedCommands.argument.blockPredicate.property_name_pass_does_not_exist": "The block %s does not have the property named %s",
  "enhancedCommands.argument.blockPredicate.property_name_pass_exists": "The block %s has the property named %s",
  "enhancedCommands.argument.blockPredicate.property_not_this_value": "The block at %s has the property %s, but the expected value is %s",
  "enhancedCommands.argument.blockPredicate.property_test_pass": "Property test %s passed",
  "enhancedCommands.argument.blockPredicate.property_value_not_parsed": "The property %s cannot parse the value %s",
  "enhancedCommands.argument.blockPredicate.property_value_not_parsed_empty": "The property %s cannot parse the empty value",
  "enhancedCommands.argument.blockPredicate.rel": "Test a block at a relative position",
  "enhancedCommands.argument.blockPredicate.rel.fail": "The block of relative position %s fails the test, because:",
  "enhancedCommands.argument.blockPredicate.rel.pass": "The block of relative position %s passes the test, because:",
  "enhancedCommands.argument.blockPredicate.test_relative_above_fail": "The block at %s blocks above %s fails the test, because:",
  "enhancedCommands.argument.blockPredicate.test_relative_above_pass": "The block at %s blocks above %s passes the test, because:",
  "enhancedCommands.argument.blockPredicate.test_relative_below_fail": "The block at %s blocks below %s fails the test, because:",
  "enhancedCommands.argument.blockPredicate.test_relative_below_pass": "The block at %s blocks below %s passes the test, because:",
  "enhancedCommands.argument.blockPredicate.union": "Union multiple conditions, passes if at least one passes",
  "enhancedCommands.argument.blockPredicate.union.fail": "As none of the following passed (%s/%s), the test failed:",
  "enhancedCommands.argument.blockPredicate.union.pass": "As at least one of the following passed (%s/%s), the test passes:",
  "enhancedCommands.argument.block_function.cannotParse": "Cannot parse block function",
  "enhancedCommands.argument.block_function.originalValue": "Using original value",
  "enhancedCommands.argument.block_function.randomValue": "Random value",
  "enhancedCommands.argument.block_predicate.above_block": "Above a block that matches a predicate",
  "enhancedCommands.argument.block_predicate.anyValue": "Matches any value, as long as the property exists",
  "enhancedCommands.argument.block_predicate.beneath_block": "Beneath a block that matches a predicate",
  "enhancedCommands.argument.block_predicate.cannotParse": "Cannot parse block predicate",
  "enhancedCommands.argument.block_predicate.comparator_expected": "Comparator expected",
  "enhancedCommands.argument.block_predicate.constant": "Match any",
  "enhancedCommands.argument.block_predicate.end_of_properties": "End of properties",
  "enhancedCommands.argument.block_predicate.next_property": "Next property",
  "enhancedCommands.argument.block_predicate.noneValue": "Don't match values, which means the property should not exist",
  "enhancedCommands.argument.block_predicate.start_of_properties": "Start of properties",
  "enhancedCommands.argument.block_predicate.unknown_comparator": "Unknown comparator: %s",
  "enhancedCommands.argument.keyword_args.duplicate_argument_name": "Duplicate argument name: %s",
  "enhancedCommands.argument.keyword_args.unknown_argument_name": "Unknown argument name: %s",
  "enhancedCommands.argument.nbt_predicate.duplicate_key": "Duplicate key: %s",
  "enhancedCommands.argument.nbt_predicate.invalid_regex": "Invalid regex: %s",
  "enhancedCommands.argument.nbt_predicate.must_be_number_or_string": "The value after the comparator must be a number or string, instead of %s",
  "enhancedCommands.argument.nbt_predicate.sign_expected": "Sign (':' or '=') expected",
  "enhancedCommands.argument.nbt_predicate.tooltip.any_key": "Any key",
  "enhancedCommands.argument.nbt_predicate.tooltip.any_value": "Any value",
  "enhancedCommands.argument.nbt_predicate.tooltip.end_of_compound": "End of the NBT compound",
  "enhancedCommands.argument.nbt_predicate.tooltip.end_of_list": "End of the NBT list",
  "enhancedCommands.argument.nbt_predicate.tooltip.equal": "Equals to a value, or numerically equals to a number",
  "enhancedCommands.argument.nbt_predicate.tooltip.match": "Matches a value",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_equal": "Not equal to value or numerically equal",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_match": "Not matching a value",
  "enhancedCommands.argument.nbt_predicate.tooltip.not_regex": "Not matching a regex pattern",
  "enhancedCommands.argument.nbt_predicate.tooltip.regex": "Matches a regex pattern",
  "enhancedCommands.argument.nbt_predicate.tooltip.separate": "Separator between elements",
  "enhancedCommands.argument.nbt_predicate.tooltip.start_of_compound": "Start of an NBT compound",
  "enhancedCommands.argument.nbt_predicate.tooltip.start_of_list": "Start of an NBT list",
  "enhancedCommands.argument.pos.crosshair_double": "The precise position of the crosshair target",
  "enhancedCommands.argument.pos.crosshair_double.remaining": "Remaining coordinates of precise crosshair target position",
  "enhancedCommands.argument.pos.crosshair_int": "The block position of the crosshair target",
  "enhancedCommands.argument.pos.crosshair_int.remaining": "Remaining coordinates of crosshair target block position",
  "enhancedCommands.argument.pos.here_double": "Current precise position",
  "enhancedCommands.argument.pos.here_int": "Current block position",
  "enhancedCommands.argument.pos.local_coordinate": "Local coordinates",
  "enhancedCommands.argument.pos.local_coordinate.remaining": "Remaining local coordinates",
  "enhancedCommands.argument.pos.local_coordinates_not_allowed": "Local coordinates are not allowed here",
  "enhancedCommands.argument.pos.relative_coordinate": "Relative coordinates",
  "enhancedCommands.argument.pos.relative_coordinate.remaining": "Remaining relative coordinates",
  "enhancedCommands.argument.region.cuboid": "Cuboid",
  "enhancedCommands.argument.region.cuboid_outline": "Cuboid outline",
  "enhancedCommands.argument.region.cuboid_outline.non_positive_thickness": "The thickness of the must be a positive integer, but got %s",
  "enhancedCommands.argument.region.cuboid_outline.too_thick": "The region is too thick: expected no larger than %s, but got %s",
  "enhancedCommands.argument.region.cuboid_wall": "Cuboid wall",
  "enhancedCommands.argument.region.cylinder": "Cylinder",
  "enhancedCommands.argument.region.hollow_cylinder": "Hollow cylinder",
  "enhancedCommands.argument.region.intersect": "Intersect of multiple regions",
  "enhancedCommands.argument.region.outline": "Outline of a region",
  "enhancedCommands.argument.region.sphere": "Sphere",
  "enhancedCommands.argument.region.union": "Union multiple regions",
  "enhancedCommands.argument.unknown_value": "Unknown value: %s",
  "enhancedCommands.blockPos": "(%s %s %s)",
  "enhancedCommands.commands.rand.boolean.0": "You're lucky because you picked %s",
  "enhancedCommands.commands.rand.boolean.1": "Surprisingly, this time the boolean value is %s",
  "enhancedCommands.commands.rand.boolean.2": "It's hard to choose between true and false, but you met %s",
  "enhancedCommands.commands.rand.boolean.3": "Boolean is easy to learn but hard to choose - until you chose %s",
  "enhancedCommands.commands.rand.boolean.4": "This time it is %s - is it within your expectation?",
  "enhancedCommands.commands.rand.boolean.5": "Look! The value is %s. What does it stand for?",
  "enhancedCommands.commands.rand.boolean.6": "True and false, that's not the question, because you chose %s",
  "enhancedCommands.commands.rand.boolean.7": "It's not a surprise to pick %s, because each boolean has an equal opportunity to be selected",
  "enhancedCommands.commands.rand.boolean.8": "I think this time, %s is the most suitable",
  "enhancedCommands.commands.rand.boolean.9": "I asked the two boolean values, and %s responded the most quickly",
  "enhancedCommands.commands.rand.boolean_with_probability.0": "When the probability is %s, you met with a %s",
  "enhancedCommands.commands.rand.boolean_with_probability.1": "The probability to pick true is %s, while you luckily picked %s",
  "enhancedCommands.commands.rand.boolean_with_probability.2": "You luckily picked %2$s, while the probability to pick true is %s",
  "enhancedCommands.commands.rand.boolean_with_probability.3": "Boolean is hard to choose because you have %s chance to pick true, but you picked %s",
  "enhancedCommands.commands.rand.boolean_with_probability.4": "This time it is %2$s, while the probability to pick true is %1$s - is it within your expectation?",
  "enhancedCommands.commands.rand.boolean_with_probability.5": "Look! The value is %2$s while you have %1$s chance to pick true. What does it stand for?",
  "enhancedCommands.commands.rand.boolean_with_probability.6": "Do you think it is hard to choose %2$s, while the chance to pick true is %1$s?",
  "enhancedCommands.commands.rand.boolean_with_probability.7": "The true value has chance of %s to be selected, and you picked %s. Is is a surprise?",
  "enhancedCommands.commands.rand.boolean_with_probability.8": "I think this time, %2$s is the most suitable, even if you have %1$s chance to pick true",
  "enhancedCommands.commands.rand.boolean_with_probability.9": "Surprisingly, even if the chance to pick true is %s, %s stands out",
  "enhancedCommands.commands.rand.min_max_wrong": "The min value (%s) should not be larger than the max value (%s)",
  "enhancedCommands.commands.rand.number.0": "This time, the random value between %s and %s is %s",
  "enhancedCommands.commands.rand.number.1": "Each number between %s and %s has an equal chance, but you selected %s",
  "enhancedCommands.commands.rand.number.2": "When picking number between %s and %s, the number %s is luckily enough to be picked",
  "enhancedCommands.commands.rand.number.3": "The result is simple: you got %3$s, while the range is from %1$s to %2$s",
  "enhancedCommands.commands.rand.number.4": "I asked all numbers between %s and %s, and think %s is the most suitable for you",
  "enhancedCommands.commands.rand.number.5": "In all numbers between %s and %s, one number wants the opportunity, saying its name is %s",
  "enhancedCommands.commands.rand.number.6": "The number %3$s whispers to you: I'm lucky to meet you, while other numbers between %1$s and %2$s are in silence",
  "enhancedCommands.commands.rand.number.7": "I examined all numbers between %s and %s, and %s won",
  "enhancedCommands.commands.rand.number.8": "I think this time, for numbers between %s and %s, %s is the most suitable",
  "enhancedCommands.commands.rand.number.9": "I'm surprised that %3$s is picked, instead of other values between %1$s and %2$s",
  "enhancedCommands.commands.region.verify.result": "For region %1$s, %2$s block(s) are iterated but do not match (marked as %3$s), and %4$s block(s) match but are not iterated (marked as %5%s).",
  "enhancedCommands.commands.setblocks.complete": "The block operation in the region completed, affecting %s blocks",
  "enhancedCommands.commands.setblocks.large_region": "Starting to set massive blocks in a large region (about %s blocks). It will be completed for a while.",
  "enhancedCommands.commands.setblocks.region_too_large": "The command cannot be executed because the region is too large (about %s blocks in the region, but the limit is %s). If you are sure to perform that, please add parameter \"bypass_limit=true\".",
  "enhancedCommands.commands.setblocks.task_name": "Set blocks (region %s)",
  "enhancedCommands.commands.tasks.count.none": "There are no tasks currently",
  "enhancedCommands.commands.tasks.count.plural": "There are %s tasks currently",
  "enhancedCommands.commands.tasks.count.single": "There is %s task currently",
  "enhancedCommands.commands.tasks.remove.none": "No tasks to be removed",
  "enhancedCommands.commands.tasks.remove.plural": "Removed %s tasks",
  "enhancedCommands.commands.tasks.remove.single": "Removed %s task",
  "enhancedCommands.commands.testfor.block.info": "The block %s at %s is %s (%s)",
  "enhancedCommands.commands.testfor.block.info_with_properties": "The block %s at %s is %s (%s), with the following properties",
  "enhancedCommands.commands.testfor.block_info.block_light": "The block %s at %s has the block light level %s",
  "enhancedCommands.commands.testfor.block_info.block_vision.false": "The block %s at %s does not block vision",
  "enhancedCommands.commands.testfor.block_info.block_vision.true": "The block %s at %s blocks vision",
  "enhancedCommands.commands.testfor.block_info.emits_redstone_power.false": "The block %s at %s does not emit redstone power",
  "enhancedCommands.commands.testfor.block_info.emits_redstone_power.true": "The block %s at %s emits redstone power",
  "enhancedCommands.commands.testfor.block_info.hardness": "The block %s at %s has the hardness %s",
  "enhancedCommands.commands.testfor.block_info.light": "The block %s at %s has the light level %s",
  "enhancedCommands.commands.testfor.block_info.luminance": "The block %s at %s has the luminance %s",
  "enhancedCommands.commands.testfor.block_info.model_offset.false": "The block %s at %s does not have a model offset",
  "enhancedCommands.commands.testfor.block_info.model_offset.true": "The block %s at %s has a following model offset: %s",
  "enhancedCommands.commands.testfor.block_info.opaque.false": "The block %s at %s is not opaque",
  "enhancedCommands.commands.testfor.block_info.opaque.true": "The block %s at %s is opaque",
  "enhancedCommands.commands.testfor.block_info.random_ticks.false": "The block %s at %s does not have random ticks",
  "enhancedCommands.commands.testfor.block_info.random_ticks.true": "The block %s at %s has random ticks",
  "enhancedCommands.commands.testfor.block_info.replaceable.false": "The block %s at %s is not replaceable when placing blocks",
  "enhancedCommands.commands.testfor.block_info.replaceable.true": "The block %s at %s is replaceable when placing blocks",
  "enhancedCommands.commands.testfor.block_info.sky_light": "The block %s at %s has the sky light level %s",
  "enhancedCommands.commands.testfor.block_info.strong_redstone_power": "The block %s at %s has the strong redstone power %s on the %s side",
  "enhancedCommands.commands.testfor.block_info.suffocate.false": "The block %s at %s does not suffocate",
  "enhancedCommands.commands.testfor.block_info.suffocate.true": "The block %s at %s suffocates",
  "enhancedCommands.commands.testfor.block_info.weak_redstone_power": "The block %s at %s has the weak redstone power %s on the %s side",
  "enhancedCommands.commands.testpos.result": "The position argument is interpreted as follows:",
  "enhancedCommands.direction.all": "all directions",
  "enhancedCommands.direction.back": "the opposite of looking direction",
  "enhancedCommands.direction.back_horizontal": "the opposite of horizontal looking direction",
  "enhancedCommands.direction.down": "down",
  "enhancedCommands.direction.east": "east",
  "enhancedCommands.direction.front": "the looking direction",
  "enhancedCommands.direction.front_horizontal": "the horizontal looking direction",
  "enhancedCommands.direction.horizontal": "horizontal directions",
  "enhancedCommands.direction.left": "the left of looking direction",
  "enhancedCommands.direction.north": "north",
  "enhancedCommands.direction.random": "random direction",
  "enhancedCommands.direction.right": "the right of looking direction",
  "enhancedCommands.direction.south": "south",
  "enhancedCommands.direction.up": "up",
  "enhancedCommands.direction.vertical": "vertical directions",
  "enhancedCommands.direction.west": "west",
  "enhancedCommands.exposureType.air": "exposed to air",
  "enhancedCommands.exposureType.empty_collision": "exposed to a block without collision",
  "enhancedCommands.exposureType.empty_side_collision": "exposed to a block without collision at the side",
  "enhancedCommands.exposureType.incomplete_side_collision": "exposed to a block with incomplete (or empty) collision at the side",
  "enhancedCommands.outlineType.floor_and_ceil": "Block positions vertically next to least one (in 2) that is not in",
  "enhancedCommands.outlineType.outline": "Block positions next to at least one (in 6) that is not in",
  "enhancedCommands.outlineType.outline_connected": "Block positions near at least one (in 26) that is not in",
  "enhancedCommands.outlineType.wall": "Block positions horizontally next to at least one (in 4) that is not in",
  "enhancedCommands.outlineType.wall_connected": "Block positions horizontally near at least one (in 8) that is not in",
  "enhancedCommands.paramTooFew": "The number of parameters (%s) is lower than the limit (%s)",
  "enhancedCommands.paramTooMany": "The number of parameters (%s) exceeds the limit (%s)",
  "enhancedCommands.position": "(%s, %s, %s)"
}